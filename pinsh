#!/bin/bash
#
#
VERSION="v0.0.1.3"
#
#
#

PATH_PINSH="/ownCloud/org/pinsh"

if [ "$1" = "h" ]
   then
       echo "pinsh              ->     introduce un nuevo pin"
       echo "pinsh     g        ->     genera galería recursivamente"
       echo "pinsh     index    ->     genera página principal index.html"
       exit
       fi

if [ "$1" = "g" ]
   then

function gallery {
       
height_small=187
height_large=768
quality=85
thumbdir=".photos"
htmlfile="index.html"
title="$(basename "$PWD")"
footer='Created with <a href="https://github.com/uGeek/pinsh">pinsh</a>'

# Use convert from ImageMagick
convert="convert" 
# Use JHead for EXIF Information
exif="jhead"

# Bootstrap (currently v3.4.1)
stylesheet="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.min.css"

downloadicon='<span class="glyphicon glyphicon-floppy-save" aria-hidden="true"></span>'
movieicon='<span class="glyphicon glyphicon-film" aria-hidden="true"></span>'
homeicon='<span class="glyphicon glyphicon-home" aria-hidden="true"></span>'

# Debugging output
# true=enable, false=disable 
debug=true

#########################################################################################
#### End Configuration Section
#########################################################################################


me=$(basename "$0")
datetime=$(date  "+%d-%m-%Y %H:%M:%S")

#datetime+=" UTC"

function usage {
	returnCode="$1"
	echo -e "Usage: $me [-t <title>] [-d <thumbdir>] [-h]:
	[-t <title>]\\t sets the title (default: $title)
	[-d <thumbdir>]\\t sets the thumbdir (default: $thumbdir)
	[-h]\\t\\t displays help (this message)"
	exit "$returnCode"
}

function debugOutput(){
	if [[ "$debug" == true ]]; then
		echo "$1" # if debug variable is true, echo whatever's passed to the function
	fi
}

function getFileSize(){
	# Be aware that BSD stat doesn't support --version and -c
	if stat --version &>/dev/null; then
		# GNU
		myfilesize=$(stat -c %s "$1" | awk '{$1/=1000000;printf "%.2fMB\n",$1}')
	else
		# BSD
		myfilesize=$(stat -f %z "$1" | awk '{$1/=1000000;printf "%.2fMB\n",$1}')
	fi
	echo "$myfilesize"
}

while getopts ":t:d:h" opt; do
	case $opt in
	t)
		title="$OPTARG"
		;;
	d)
		thumbdir="$OPTARG"
		;;
	h)
		usage 0
		;;
	*)
		echo "Invalid option: -$OPTARG"
		usage 1
		;;
	esac
done

debugOutput "- $me : $datetime"

### Check Commands
command -v $convert >/dev/null 2>&1 || { echo >&2 "!!! $convert it's not installed.  Aborting."; exit 1; }
command -v $exif >/dev/null 2>&1 || { echo >&2 "!!! $exif it's not installed.  Aborting."; exit 1; }

### Create Folders
[[ -d "$thumbdir" ]] || mkdir "$thumbdir" || exit 2
#sleep 30
heights[0]=$height_small
heights[1]=$height_large
for res in ${heights[*]}; do
	[[ -d "$thumbdir/$res" ]] || mkdir -p "$thumbdir/$res" || exit 3
done

#### Create Startpage
debugOutput "$htmlfile"
cat > "$htmlfile" << EOF
<!DOCTYPE HTML>
<html lang="es">
<head>
	<meta charset="utf-8">
	<title>$title</title>
	<meta name="viewport" content="width=device-width">
	<meta name="robots" content="noindex, nofollow">
	<link rel="stylesheet" href="$stylesheet">
</head>
<body>
<div class="container">
	<div class="row">
		<div class="col-xs-12">
			<div class="page-header"><h1>$title</h1></div>
		</div>
	</div>
EOF

### Photos (JPG)
if [[ $(find . -maxdepth 1 -type f -iname \*.jpg | wc -l) -gt 0 ]]; then

echo '<div class="row">' >> "$htmlfile"
## Generate Images
numfiles=0
for filename in *.[jJ][pP][gG]; do
	filelist[$numfiles]=$filename
	(( numfiles++ ))
	for res in ${heights[*]}; do
		if [[ ! -s $thumbdir/$res/$filename ]]; then
			debugOutput "$thumbdir/$res/$filename"
			$convert -auto-orient -strip -quality $quality -resize x$res "$filename" "$thumbdir/$res/$filename"
		fi
	done
	cat >> "$htmlfile" << EOF
<div class="col-md-3 col-sm-12">
	<p>
		<a href="$thumbdir/$filename.html"><img src="$thumbdir/$height_small/$filename" alt="" class="img-responsive"></a>
		<div class="hidden-md hidden-lg"><hr></div>
	</p>
</div>
EOF
[[ $((numfiles % 4)) -eq 0 ]] && echo '<div class="clearfix visible-md visible-lg"></div>' >> "$htmlfile"
done
echo '</div>' >> "$htmlfile"

## Generate the HTML Files for Images in thumbdir
file=0
while [[ $file -lt $numfiles ]]; do
	filename=${filelist[$file]}
	prev=""
	next=""
	[[ $file -ne 0 ]] && prev=${filelist[$((file - 1))]}
	[[ $file -ne $((numfiles - 1)) ]] && next=${filelist[$((file + 1))]}
	imagehtmlfile="$thumbdir/$filename.html"
	exifinfo=$($exif "$filename")
	filesize=$(getFileSize "$filename")
	debugOutput "$imagehtmlfile"
	cat > "$imagehtmlfile" << EOF
<!DOCTYPE HTML>
<html lang="en">
<head>
<meta charset="utf-8">
<title>$filename</title>
<meta name="viewport" content="width=device-width">
<meta name="robots" content="noindex, nofollow">
<link rel="stylesheet" href="$stylesheet">
</head>
<body>
<div class="container">
<div class="row">
	<div class="col-xs-12">
		<div class="page-header"><h2><a href="../$htmlfile">$homeicon</a> <span class="text-muted">/</span> $filename</h2></div>
	</div>
</div>
<h2>$title</h2>

<a href="javascript:history.back()"> Atrás</a>


EOF

	# Pager
	echo '<div class="row"><div class="col-xs-12"><nav><ul class="pager">' >> "$imagehtmlfile"
	[[ $prev ]] && echo '<li class="previous"><a href="'"$prev"'.html"><span aria-hidden="true">&larr;</span></a></li>' >> "$imagehtmlfile"
	[[ $next ]] && echo '<li class="next"><a href="'"$next"'.html"><span aria-hidden="true">&rarr;</span></a></li>' >> "$imagehtmlfile"
	echo '</ul></nav></div></div>' >> "$imagehtmlfile"

	cat >> "$imagehtmlfile" << EOF
<div class="row">
	<div class="col-xs-12">
		<p><img src="$height_large/$filename" class="img-responsive" alt=""></p>
	</div>
</div>
<div class="row">
	<div class="col-xs-12">
		<p><a class="btn btn-info btn-lg" href="../$filename">$downloadicon Download Original ($filesize)</a></p>
	</div>
</div>
EOF

	# EXIF
	if [[ $exifinfo ]]; then
		cat >> "$imagehtmlfile" << EOF
<div class="row">
<div class="col-xs-12">
<pre>
$exifinfo
</pre>
</div>
</div>
EOF
	fi

	# Footer
	cat >> "$imagehtmlfile" << EOF
</div>
</body>
</html>
EOF
	(( file++ ))
done

fi

### Movies (MOV or MP4)
if [[ $(find . -maxdepth 1 -type f -iname \*.mov  -o -iname '*.mp4' | wc -l) -gt 0 ]]; then
	cat >> "$htmlfile" << EOF
	<div class="row">
		<div class="col-xs-12">
			<div class="page-header"><h2>Movies</h2></div>
		</div>
	</div>
	<div class="row">
	<div class="col-xs-12">
EOF
	if [[ $(find . -maxdepth 1 -type f -iname \*.mov | wc -l) -gt 0 ]]; then
	for filename in *.[mM][oO][vV]; do
		filesize=$(getFileSize "$filename")
		cat >> "$htmlfile" << EOF
<a href="$filename" class="btn btn-primary" role="button">$movieicon $filename ($filesize)</a>
EOF
	done
	fi
	if [[ $(find . -maxdepth 1 -type f -iname \*.mp4 | wc -l) -gt 0 ]]; then
	for filename in *.[mM][pP]4; do
		filesize=$(getFileSize "$filename")
		cat >> "$htmlfile" << EOF
<a href="$filename" class="btn btn-primary" role="button">$movieicon $filename ($filesize)</a>
EOF
	done
	fi
	echo '</div></div>' >> "$htmlfile"
fi

### Downloads (ZIP)
if [[ $(find . -maxdepth 1 -type f -iname \*.zip | wc -l) -gt 0 ]]; then
	cat >> "$htmlfile" << EOF
	<div class="row">
		<div class="col-xs-12">
			<div class="page-header"><h2>Downloads</h2></div>
		</div>
	</div>
	<div class="row">
	<div class="col-xs-12">
EOF
	for filename in *.[zZ][iI][pP]; do
		filesize=$(getFileSize "$filename")
		cat >> "$htmlfile" << EOF
<a href="$filename" class="btn btn-primary" role="button">$downloadicon $filename ($filesize)</a>
EOF
	done
	echo '</div></div>' >> "$htmlfile"
fi

### Footer
cat >> "$htmlfile" << EOF
<hr>
<footer>
	<p>$footer</p>
	<p class="text-muted">$datetime</p>
</footer>
</div> <!-- // container -->
<br>
<br>
</body>
</html>
EOF

debugOutput "= done :-)"
}

OLDIFS=$IFS
IFS=$'\n'
echo "Starting video gallery..."
DIRECTORIES=$(find -type d -not -path '*/\.*')

# loop over all subdirectories
for d in $DIRECTORIES
do
    pushd $d

    gallery

    # jump back
    popd
done

IFS=$OLDIFS


## Creando pagina index
title_index=pinsh
datetime=$(date  "+%d-%m-%Y %H:%M:%S")

echo '

<!DOCTYPE HTML>
<html lang="es">
<head>
	<meta charset="utf-8">
	<title>'$title_index'</title>
	<meta name="viewport" content="width=device-width">
	<meta name="robots" content="noindex, nofollow">
	<link rel="stylesheet" href="'$stylesheet'">
</head>
<body>
<div class="container">
	<div class="row">
		<div class="col-xs-12">
			<div class="page-header"><h1>'$title_index'</h1></div>
		</div>
	</div>
<h2>Galería pinsh</h2> ' > index.html


function aleatorio {
FOTO=$(find . -type f | sed '/^ *$/d' | grep "187" | shuf -n 1)
echo '

<div class="col-md-3 col-sm-12">
	<p>
		<a href="'$(echo $FOTO | sed s'|187/||'g | sed s'|jpg|jpg.html|'g)'"><img src="'$FOTO'" alt="" class="img-responsive"></a>
		<div class="hidden-md hidden-lg"><hr></div>
	</p>
</div>
' >> index.html

}

aleatorio
aleatorio
aleatorio
aleatorio

aleatorio
aleatorio
aleatorio
aleatorio

aleatorio
aleatorio
aleatorio
aleatorio

aleatorio
aleatorio
aleatorio
aleatorio

aleatorio
aleatorio
aleatorio
aleatorio

aleatorio
aleatorio
aleatorio
aleatorio

aleatorio
aleatorio
aleatorio
aleatorio

aleatorio
aleatorio
aleatorio
aleatorio

echo '
<div class="row">
<div class="col-xs-12">
</div>
</div>
<br>
<hr>
<h3>Etiquetas</h3> 
<h3>
' >> index.html

find . -type f | grep "index.html" | sed -r 's/(.*)/\<a href="\1" target="_blank" rel="noopener">\1\<\/a\><br>/' |sed s'|/index.html</a><br>|</a><br>|'g | sed s'|>./|>|'g |  sed '/^*index.html/d' | sort |  grep -v '^<a href="./index.html'  >> index.html

echo '
</h3>
<hr>
<footer>
	<p>'$footer'</p>
	<p class="text-muted">'$datetime'</p>
</footer>
</div> <!-- // container -->

<br>
<br>

</body>
</html>
' >>  index.html

exit
fi


if [ "$1" = "index" ]
   then
datetime=$(date  "+%d-%m-%Y %H:%M:%S")
height_small=187
height_large=768
quality=85
thumbdir=".photos"
htmlfile="index.html"
title="$(basename "$PWD")"
footer='Created with <a href="https://github.com/uGeek/pinsh">pinsh</a>'

# Use convert from ImageMagick
convert="convert" 
# Use JHead for EXIF Information
exif="jhead"

# Bootstrap (currently v3.4.1)
stylesheet="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.min.css"

downloadicon='<span class="glyphicon glyphicon-floppy-save" aria-hidden="true"></span>'
movieicon='<span class="glyphicon glyphicon-film" aria-hidden="true"></span>'
homeicon='<span class="glyphicon glyphicon-home" aria-hidden="true"></span>'


title_index=pinsh

echo '
<!DOCTYPE HTML>
<html lang="es">
<head>
	<meta charset="utf-8">
	<title>'$title_index'</title>
	<meta name="viewport" content="width=device-width">
	<meta name="robots" content="noindex, nofollow">
	<link rel="stylesheet" href="'$stylesheet'">
</head>
<body>
<div class="container">
	<div class="row">
		<div class="col-xs-12">
			<div class="page-header"><h1>'$title_index'</h1></div>
		</div>
	</div>

<h2>Galería pinsh</h2> ' > index.html

function aleatorio {
FOTO=$(find . -type f | sed '/^ *$/d' | grep "187" | shuf -n 1)
echo '

<div class="col-md-3 col-sm-12">
	<p>
		<a href="'$(echo $FOTO | sed s'|187/||'g | sed s'|jpg|jpg.html|'g)'"><img src="'$FOTO'" alt="" class="img-responsive"></a>
		<div class="hidden-md hidden-lg"><hr></div>
	</p>
</div>
' >> index.html
}

aleatorio
aleatorio
aleatorio
aleatorio

aleatorio
aleatorio
aleatorio
aleatorio

aleatorio
aleatorio
aleatorio
aleatorio

aleatorio
aleatorio
aleatorio
aleatorio

aleatorio
aleatorio
aleatorio
aleatorio

aleatorio
aleatorio
aleatorio
aleatorio

aleatorio
aleatorio
aleatorio
aleatorio

aleatorio
aleatorio
aleatorio
aleatorio

echo '
<div class="row">
<div class="col-xs-12">
</div>
</div>
<br>
<hr>
<h3>Etiquetas</h3> 
<h3>

' >> index.html

find . -type f | grep "index.html" | sed -r 's/(.*)/\<a href="\1" target="_blank" rel="noopener">\1\<\/a\><br>/' |sed s'|/index.html</a><br>|</a><br>|'g | sed s'|>./|>|'g |  sed '/^*index.html/d' | sort |  grep -v '^<a href="./index.html'  >> index.html

echo '
</h3>
<hr>
<footer>
	<p>'$footer'</p>
	<p class="text-muted">'$datetime'</p>
</footer>
</div> <!-- // container -->

<br>
<br>

</body>
</html>
' >>  index.html

exit
fi

mkdir -p $PATH_PINSH
echo -en "Introduce la URL: " ; read URL
echo "Listado de pins"
ls -1F $PATH_PINSH/ | grep '/$' | sed s'|/||'g | nl 

echo -en  "Introduce el nº o nombre que quieres dar al pin: "; read NUM

es_numero='^-?[0-9]+([.][0-9]+)?$'

if ! [[ "$NUM" =~ $es_numero ]] ; then
   #   echo "NO es numero"
    #   PIN=$(ls -1F  $PATH_PINSH/ | grep '/$' | sed s'|/||'g | sed -n ""$NUM""p)
   mkdir -p $PATH_PINSH/"$NUM"
   wget -O $PATH_PINSH/"$NUM"/"$NUM".jpg $URL

else
    #   echo " es un numero"
#    echo "Introduce el numero de pin: " ; read NUM

   PIN=$(ls -1F  $PATH_PINSH/ | grep '/$' | sed s'|/||'g | sed -n ""$NUM""p)
   mkdir -p $PATH_PINSH/"$PIN"
      wget -O $PATH_PINSH/"$PIN"/"$PIN-$(ls $PATH_PINSH/"$PIN" | wc -l)".jpg $URL
fi
